#! /usr/bin/env node

if (process.env.NODE_ENV === "development") {
  require("dotenv").config();
}

const args = process.argv.slice(2);

const {
  Primary: PrimaryRunner,
  Extended: ExtendedRunner,
  generateApp,
} = require("../lib/runner");

const { Client } = require("meroxa-js");

const meroxaJS = new Client({
  auth: process.env.MEROXA_ACCESS_TOKEN || "",
  url: process.env.MEROXA_API_URL,
});

// Private interface for communication between Meroxa CLI and turbine-js
// Enables nodejs data app support using the Meroxa CLI
async function executeCommand() {
  if (args[0] === "test") {
    // meroxa apps run
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.runAppLocal();
  } else if (args[0] === "generate") {
    // meroxa apps init
    commandRun = await generateApp(args[1], args[2]);
  } else if (args[0] === "functions") {
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.listFunctions();
    if (!commandRun.err) {
      console.log(`\nturbine-response: ${commandRun.val}\n`);
    }
  } else if (args[0] === "hasfunctions") {
    // meroxa apps deploy step 1 (check for functions in user's data app)
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.hasFunctions();
    if (!commandRun.err) {
      console.log(`\nturbine-response: ${commandRun.val}\n`);
    }
  } else if (args[0] === "clibuild") {
    // meroxa apps deploy step 2 (set up function app directory structure and hand to CLI)
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.buildFunction();
    if (!commandRun.err) {
      console.log(`\nturbine-response: ${commandRun.val}\n`);
    }
  } else if (args[0] === "clideploy") {
    // meroxa apps deploy step 3 (run users data app / create meroxa platform entities)
    const primaryRunner = new PrimaryRunner(args[2] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.runAppPlatform(args[1]);
  } else if (args[0] === "rollback") {
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.rollback();
  } else if (args[0] === "deploy") {
    // DEPRECATED: "heavy lift" build & deploy logic using ExtendedRunner
    const extendedRunner = new ExtendedRunner(
      args[1] || process.cwd(),
      meroxaJS
    );
    commandRun = await extendedRunner.runAppPlatform();
  } else {
    throw new Error("Invalid turbine command");
  }

  if (commandRun.err) {
    process.exitCode = 1;
    console.error(commandRun.val.unwrapMessage());
  }
}

executeCommand();
