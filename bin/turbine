#! /usr/bin/env node

if (process.env.NODE_ENV === "development") {
  require("dotenv").config();
}

const args = process.argv.slice(2);

const { Primary, Extended } = require("../lib/runner");

const { Client } = require("meroxa-js");

const meroxaJS = new Client({
  auth: process.env.MEROXA_ACCESS_TOKEN || "",
  url: process.env.MEROXA_API_URL,
});

async function executeCommand() {
  if (args[0] === "test") {
    // meroxa apps run
    const primaryRunner = new Primary(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.runAppLocal();
  } else if (args[0] === "deploy") {
    // meroxa apps deploy
    const extendedRunner = new Extended(args[1] || process.cwd(), meroxaJS);
    commandRun = await extendedRunner.runAppPlatform();
  } else if (args[0] === "generate") {
    // meroxa apps init
    const primaryRunner = new Primary(args[2] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.generate(args[1]);
  } else if (args[0] === "functions") {
    const primaryRunner = new Primary(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.listFunctions();
    if (!commandRun.err) {
      console.log(commandRun.val);
    }
  } else if (args[0] === "hasfunctions") {
    const primaryRunner = new Primary(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.hasFunctions();
    if (!commandRun.err) {
      console.log(commandRun.val);
    }
  } else if (args[0] === "rollback") {
    const primaryRunner = new Primary(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.rollback();
  } else if (args[0] === "clideploy") {
    const primaryRunner = new Primary(args[2] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.runAppPlatform(args[1]);
  } else if (args[0] === "clibuild") {
    const primaryRunner = new Primary(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.buildFunction();
    if (!commandRun.err) {
      console.log(commandRun.val);
    }
  } else {
    throw new Error("Invalid turbine command");
  }

  if (commandRun.err) {
    process.exitCode = 1;
    console.error(commandRun.val.unwrapMessage());
  }
}

executeCommand();
