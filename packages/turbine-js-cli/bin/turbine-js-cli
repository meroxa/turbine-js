#! /usr/bin/env node

const args = process.argv.slice(2);

const { Primary: PrimaryRunner, generateApp } = require("../lib/runner");

const { Client } = require("@meroxa/meroxa-js");

const meroxaJS = new Client({
  auth: process.env.MEROXA_ACCESS_TOKEN || "",
  url: process.env.MEROXA_API_URL,
  accountUUID: process.env.MEROXA_ACCOUNT_UUID,
});

const version = require("../package.json").version;

// Private interface for communication between Meroxa CLI and turbine-js
// Enables nodejs data app support using the Meroxa CLI
async function executeCommand() {
  if (args[0] === "test") {
    // meroxa apps run
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.runAppLocal();
  } else if (args[0] === "generate") {
    // meroxa apps init
    commandRun = await generateApp(args[1], args[2]);
  } else if (args[0] === "functions") {
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.listFunctions();
    if (!commandRun.err) {
      console.log(`\nturbine-response: ${commandRun.val}\n`);
    }
  } else if (args[0] === "clibuild") {
    // meroxa apps deploy step 1 (copy dockerfile from templates to app directory)
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.createDockerfile();
  } else if (args[0] === "hasfunctions") {
    // meroxa apps deploy step 2 (check for functions in user's data app)
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.hasFunctions();
    if (!commandRun.err) {
      console.log(`\nturbine-response: ${commandRun.val}\n`);
    }
  } else if (args[0] === "listresources") {
    // meroxa apps pre-deployment check: return registered resources as per end user's index.js
    const primaryRunner = new PrimaryRunner(args[1] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.listResources();
    if (!commandRun.err) {
      let value = JSON.stringify(commandRun.val);
      console.log(`\nturbine-response: ${value}\n`);
    }
  } else if (args[0] === "clideploy") {
    // meroxa apps deploy step 3 (run users data app / create meroxa platform entities)
    //arg 0 command, arg 1 image, arg 2 path, args 3 appname, args 4, git sha, args 5, spec
    const primaryRunner = new PrimaryRunner(args[2] || process.cwd(), meroxaJS);
    commandRun = await primaryRunner.runAppPlatform(
      args[1],
      args[3],
      args[4],
      version,
      args[5]
    );

    if (args[5] && !commandRun.err) {
      const stringifiedIR = JSON.stringify(commandRun.val);
      console.log(`\nturbine-response: ${stringifiedIR}\n`);
    }
  } else if (args[0] === "version") {
    commandRun = version;
    console.log(`\nturbine-response: ${commandRun}\n`);
  } else {
    throw new Error("Invalid turbine command");
  }

  if (commandRun.err) {
    process.exitCode = 1;
    console.error(commandRun.val.unwrapMessage());
  }
}

executeCommand();
